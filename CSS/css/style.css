/*
Hoja de estilo externo.

Regla CSS consta de 2 partes
1- El selector
2- Bloque de declaraciones: {
    atributo: valor;
    atributo-de-mas-dos-labaras: otro-valor;
}

Paginas de referencia 
        https://tailwindcss.com/
        https://cssreference.io/
*/


/*Son mala practica porque son bloqueantes a la hora de que el
navegador lee esta instruccion. */

@import url(otro-hoja.css);
h1 {
    color: orangered;
    background-color: black;
}


/*
Selectores Basicos
    1- Etiquetas - Son elementos html
    2- Identificadores - Atributo id - #
    3- Clases - atributo class - .

*/

p {
    color: midnightblue;
}


/* Dar estilos con Id se considera un AntiPtron (Mala practica) */

#parrafo-dos {
    background-color: skyblue;
}


/* Dar estilos con clases nos permite reutilizar nuestro codigo CSS */

.bg-skyblue {
    background-color: skyblue;
}

.bg-steelblue {
    background-color: steelblue;
}

.text-32 {
    font-size: 20px;
}

.text-32 {
    font-size: 32px;
}

.text-white {
    color: white;
}

.hijos-directos>li {
    background-color: thistle;
}

.hijos-descendientes b {
    background-color: thistle;
}


/* Los selectores de hermanos van a aplicar a los elementos que son hermanos y que esten por debajo del elemento de referencia */

.hermanos-general~li {
    background-color: thistle;
}


/* Se le aplica al segundo elemento que forma parte del selector */

.hermanos-abyacente+li {
    background-color: thistle;
}


/* Selectores de Atributo */

.selectores-atributos a[href] {
    color: orange;
}

.selectores-atributos a[target="_blank"] {
    font-weight: bold;
}


/* El comodin del * aplica el estilo si contiene el texto en cuestion en cualquier parte*/

.selectores-atributos a[href *="jonmircha"] {
    font-size: 24px;
}


/* El comodin del ^ aplica el estilo si contiene el texto en cuestion al inicio */

.selectores-atributos a[href ^="http://"] {
    text-decoration: none;
}


/* El comodin del $ aplica el estilo si contiene el texto en cuestion al final */

.selectores-atributos a[href $=".com"] {
    background-color: black
}


/* El comodin del ~ aplica el estilo si contiene el texto en cuestion en una lista separada por espacios */

.selectores-atributos a[class~="cursos"] {
    background-color: midnightblue;
}


/* El comodin del | aplica el estilo si contiene el texto en cuestion en una lista separada por espacios y que despues del texto en cuestion venga un guion medio */

.selectores-atributos a[class |="menu"] {
    font-style: italic;
}


/* Selector Universal */

* {
    font-family: sans-serif;
}

.selector-universal * {
    font-size: 24px;
}


/* Pseudoclases - Dan estilos dependiendo del contexto, posicion o estado del elemento
https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-classes
*/

.form-pseudoclases *:required {
    border-color: yellow;
}

.form-pseudoclases *:valid {
    border-color: green;
}

.form-pseudoclases *:invalid {
    border-color: red;
}

.form-pseudoclases *:focus {
    background-color: skyblue;
}

.form-pseudoclases *:disabled {
    background-color: pink;
}

.menu-pseudoclases a:visited {
    color: olive;
}

.menu-pseudoclases a:hover {
    color: orange;
}

.p-pseudoclases:hover {
    font-size: 24px;
}

#temario-css:target {
    background-color: lightgreen;
}

.lista-pseudoclases li:first-child {
    color: green;
}

.lista-pseudoclases li:last-child {
    color: violet;
}

.lista-pseudoclases li:nth-child(3) {
    color: navy;
}

.lista-pseudoclases li:nth-child(4n) {
    font-size: 20px;
}

.lista-pseudoclases li:nth-child(3n+1) {
    font-weight: bold;
}

.lista-pseudoclases li:nth-child(even) {
    background-color: yellow;
}

.lista-pseudoclases li:nth-child(odd) {
    background-color: orange;
}

.articulo-pseudoclases p:first-of-type {
    background-color: pink;
}

.articulo-pseudoclases p:last-of-type {
    background-color: violet;
}

.articulo-pseudoclases p:nth-of-type(3) {
    background-color: fuchsia;
}

.articulo-pseudoclases *:not(p) {
    background-color: beige;
}


/* Pesudoelementos - Dan estilos a partes especificas de un elemento, se usa el :: para diferenciarlos de los pseudoclases

https://developer.mozilla.org/es/docs/Web/CSS/Pseudoelementos

*/

.mu-aries::before {
    content: 'üêê';
}

.mu-aries::after {
    content: '‚ôà';
}

.mu-precio::before {
    content: '$';
    font-weight: bold;
}

.mu-precio::after {
    content: 'USD';
    font-weight: bold;
}

.p-pseudoelementos::first-letter {
    font-weight: bold;
    font-size: 32px;
}

.p-pseudoelementos::first-line {
    color: coral;
}

.p-pseudoelementos::selection {
    color: greenyellow;
    background-color: black;
}

.input-pseudoelementos::placeholder {
    color: green;
}

/* Agrupar Selectores */
.form-agrupar-selectores input[type="text"],
.form-agrupar-selectores input[type="email"], 
.form-agrupar-selectores textarea {
    border-color: yellow;
    border-width: 2px;
    border-style: dashed;
    background-color: black;
    font-size: 20px;
    display: block;
    width: 300px;
}

/*
El Algoritmo de CSS: Es la forma en que el navegador aplica los estilos al documento HTML. Es vital entender este concepto para que entiendas como se aplican y en algunas ocasiones se sobreescriben las reglas CSS

1) La C√°scada.
2) La Especificidad.
3) La Herencia.

La C√°scada es el mecanismo en que el navegador aplica los estilos. Y toma en cuenta los siguientes en este orden.
 1) El Origen del C√≥digo:
    - El User Agent ( Los estilos por defecto del navegador ).
    - Personalizaciones del usuario.
    - Los estilos del autor.
 2) La Especificidad del Selector.
 3) Orden de Aparici√≥n.

La Especificidad es el peso que tiene un selector cuando hay conflicto de estilos. Se calcula de la siguiente forma:
 Etiquetas y pseudoelementos ---------- 0,0,0,1
 Clases, atributos y pseudoclases ----- 0,0,1,0
 Identificadores ---------------------- 0,1,0,0
 Estilos en l√≠nea --------------------- 1,0,0,0
 !important --------------------------- Rompe la especificidad

La Herencia, es la capacidad de un selector de obtener (heredar) los valores de sus ancestros mas cercanos, ara alicarla se usa el valor inherit, si queremos evitarla podemos asignar otro o inicializar la proiedad en cuestion con el valor initial

https://web.dev/learn/css/inheritance/#which-properties-are-inheritable

*/

blockquote#cita-marco.cita-marco {
    background-color: lightsteelblue;
}

/* Inicio ejemplo:
Si fuera por Cascada (Por orden): Se mostraria el color cornflowerblue
Si fuera por Especificidad (Por peso): Seria el color lightgreen 
*/
blockquote {
    background-color: burlywood;
}

#cita-marco {
    background-color: lightgreen;
}

blockquote.cita-marco {
    background-color: tomato;
}

.cita-marco {
 background-color:cornflowerblue;
}
/* Fin ejemplo */

.cita-marco {
    background-color: mediumaquamarine !important;
}

blockquote#cita-marco {
    background-color: lightsalmon;
}

.cita-marco {
    background-color: moccasin !important;
    background-color: darkorange !important;
    font-size: 32px;
    border-style: dotted;
    border-color: red;
}

.cita-marco cite {
    background-color: pink;
    background-color: inherit;
    font-size: initial;
    /* font-size: 24px; */
    border-style: inherit;
    border-color: inherit;
}

/*
 https://autoprefixer.github.io/
 https://caniuse.com/

 Prefijos de los navegadores:
 -webkit-user-select: none;
 -moz-user-select: none;
 -ms-user-select: none;
 user-select: none;

 Recordatorio: 4:48:00

*/











